// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module namesBitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket 
					input logic standBy,
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap 
 ) ; 
 
 
// generating the bitmap 
 

localparam logic [7:0] COLOR_ENCODING = 8'hFF ;// RGB value in the bitmap representing the BITMAP coolor
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  
logic[0:28][0:63] object_colors = {
	64'b1000011000001100111111001100111000110000111000011001000110001111,
	64'b0000001000000100111111001100110000110000010000001001000100000111,
	64'b0001001001000100111111001100110000110010010001001001000100100111,
	64'b0001001001000100111111001100110000110010010001001001000100100111,
	64'b0001001001000100111111010010110000110010010001111001000100011111,
	64'b0001001000001100111111010010110010010000110001111001000100001111,
	64'b0001001000001100111111010010110010010000010001111001000110000111,
	64'b0001001001000100111111010010100000010010010001001001000111100111,
	64'b0001001001000100111111010010100000010010010001001001000100100111,
	64'b0000001001000100111111010010000110010010010000001000000100000111,
	64'b1000011001000100111111010010100110010010011000011100001100001111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1111111111111111111111111111111111111111111111111111111111111111,
	64'b1000111001001100011000111110000110010000111001110011100001000011,
	64'b1000011001001100001000111110000010010000010000110011100001000001,
	64'b0010001001001100001000111111100010010011100010010011100111001000,
	64'b0010001001001101001000111111100010010011100010010011100111001000,
	64'b0011111001001101001000111111100110010011100010010011100111001000,
	64'b0000011000001101001000111111000110010000100011110011100001000001,
	64'b1000011000001001001000111111001110010000100000010011100001000001,
	64'b1110001001001001001000111110001110010011100000010011100111001000,
	64'b0010001001001000001000111110011110010011100010010011100111001000,
	64'b0010001001001000000000111100011110010011100010010011100111001000,
	64'b0000011001001001100000111110000010010000010000110000100001001000,
	64'b1000111001001001100000111110000010010000010000110000100001001000};

 
 
//////////--------------------------------------------------------------------------------------------------------------= 
//hit bit map has one bit per edge:  hit_colors[3:0] =   {Left, Top, Right, Bottom}	 
//there is one bit per edge, in the corner two bits are set  
 /*logic [0:3] [0:3] [3:0] hit_colors = 
		   {16'hC446,     
			16'h8C62,    
			16'h8932, 
			16'h9113}; 
*/
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
	end 
	else begin 
		RGBout <= TRANSPARENT_ENCODING ; // default  
 
		if (InsideRectangle == 1'b1 && standBy) 
		begin // inside an external bracket  
			RGBout <= (object_colors[offsetY][offsetX] ==  0 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING; 
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
