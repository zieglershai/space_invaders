// ============================================================================
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| George Totolos    :| 08/22/2016:| Initial Revision
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
//`define ENABLE_HEX0
//`define ENABLE_HEX1
//`define ENABLE_HEX2
//`define ENABLE_HEX3
//`define ENABLE_HEX4
//`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
//`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

    //////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
    input                       ADC_CLK_10,
`endif
    //////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
    input                       MAX10_CLK1_50,
`endif
    //////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
    input                       MAX10_CLK2_50,
`endif

    //////////// SDRAM: 3.3-V LVTTL //////////
/*`ifdef ENABLE_SDRAM
    output          [12:0]      DRAM_ADDR,
    output           [1:0]      DRAM_BA,
    output                      DRAM_CAS_N,
    output                      DRAM_CKE,
    output                      DRAM_CLK,
    output                      DRAM_CS_N,
    inout           [15:0]      DRAM_DQ,
    output                      DRAM_LDQM,
    output                      DRAM_RAS_N,
    output                      DRAM_UDQM,
    output                      DRAM_WE_N,
`endif
*/
    //////////// SEG7: 3.3-V LVTTL //////////
/*`ifdef ENABLE_HEX0
    output           [7:0]      HEX0,
`endif
`ifdef ENABLE_HEX1
    output           [7:0]      HEX1,
`endif
`ifdef ENABLE_HEX2
    output           [7:0]      HEX2,
`endif
`ifdef ENABLE_HEX3
    output           [7:0]      HEX3,
`endif
`ifdef ENABLE_HEX4
    output           [7:0]      HEX4,
`endif
`ifdef ENABLE_HEX5
    output           [7:0]      HEX5,
`endif
*/
    //////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
    input            [1:0]      KEY,
`endif

    //////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
    //output           [9:0]      LEDR,
	 output           [4:0]      LEDR,

`endif

    //////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
    input            [9:0]      SW,
`endif

    //////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
    output           [3:0]      VGA_B,
    output           [3:0]      VGA_G,
    output                      VGA_HS,
    output           [3:0]      VGA_R,
    output                      VGA_VS,
`endif

    //////////// Accelerometer: 3.3-V LVTTL //////////
/*`ifdef ENABLE_ACCELEROMETER
    output                      GSENSOR_CS_N,
    input            [2:1]      GSENSOR_INT,
    output                      GSENSOR_SCLK,
    inout                       GSENSOR_SDI,
    inout                       GSENSOR_SDO,
`endif
*/
    //////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
    inout           [15:0]      ARDUINO_IO,// splited to two part button data 01/09
    //input             [7:0]       ARDUINO_IO, // button data - input
    //output            [15:8]      ARDUINO_IO, // i2s data - output 
    inout                       ARDUINO_RESET_N,
`endif

    //////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
    inout           [35:0]      GPIO
	 //input           [35:0]      GPIO

`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================



wire clk;
wire [7:0] RGB; // from mux to convertor
wire [7:0] BGR; // from convertor to vga

wire [10:0] pixelX;
wire [10:0] pixelY;
wire startOfFrame;

wire collision;
wire collisionAlienMatrixBoarder;
wire collisionPlayerBoarder;
wire alienFireCollision;
wire collision_playerFire;
wire fireCollision;
wire collision_alienShot_player;
wire collision_fire_bonusShip; // collision between bonus ship and player fire
wire alienplayer_FireCollision; // used to trigger bonus ship when alien was hit

wire standBy;
wire gameEnded;
wire startGame; // indicate passing from menu to the game

wire bottomaAlien; // when pixels locate on bottom alien in matrix
wire [10:0] alienMiddleX; // matrix middle point
wire [10:0] alienMiddleY;
wire [10:0] alienMatrixYPosition;  // top y matrix position used for bonus ship 
wire [1:0] alienType;

wire [10:0] playerXPosition; // for player shot initial

wire [7:0] scoreUpdate;
wire [31:0] score;
wire newHighScore; // if player achive new high score during the game

wire gameLose; // if life got down to zero

wire [3:0] credits; // how much money left


wire smileyDR;
wire [7:0] smileyRGB;

wire boardersDrawReq;
wire [7:0] BG_RGB;

wire alienMatrixDR;
wire [7:0] alienMatrixRGB;

wire playerDR;
wire [7:0] playerRGB;

wire alienShotDR;
wire [7:0] alienShotRGB;

wire playerShotDR;
wire [7:0] playerShotRGB;

wire scoreDR;
wire [7:0] scoreRGB;

wire lifeDR;
wire [7:0] lifeRGB;

wire startScreenDR;
wire [7:0] startScreenRGB;

wire endScreenDR;
wire [7:0] endScreenRGB;

wire creditCoinsDR;
wire [7:0]creditCoinsRGB;

wire highScoreDR;
wire [7:0]highScoreRGB; 

wire titlesDR;
wire [7:0]titlesRGB;                            

wire bounusShipDR;
wire [7:0]bounusShipRGB;

// INPUT WIRES FROM PICADE TO MAX10
wire key_start;
assign key_start = GPIO[13]; // adjust to new connector
//assign key_start = ARDUINO_IO[0];
assign LEDR[0] = key_start;

wire key_coin_N;
assign key_coin_N = GPIO[11]; // adjust to new connector
//assign key_coin_N = ARDUINO_IO[4];
assign LEDR[3] = key_coin_N;

// wires for audio 
wire LRCLK;
wire SCLK;
wire SD;



assign LEDR[1] = ~GPIO[29];
assign LEDR[2] = ~GPIO[33];


//=======================================================
//  Structural coding
//=======================================================

// clock 
vga_pll u1(
    .areset(),
    .inclk0(MAX10_CLK1_50),
    .c0(clk),
    .locked());



    
// audio module
parameter RATIO = 35;
parameter WIDTH = 16;   
I2S 
#(
    //.RATIO(RATIO),
    .WIDTH(WIDTH)
)I2S_inst
( 
    .onOff(SW[1]),
     .MCLK(clk),
    //.nReset(ARDUINO_IO[3]), //connected  to button 1 - in the future need to be diffrent port
    .nReset(GPIO[25]), //adjust to new connector
    
	 .LRCLK(LRCLK),
    .SCLK(SCLK),
    .SD(SD)
);
/*assign ARDUINO_IO[8] = LRCLK; 
assign ARDUINO_IO[9] = SCLK;
assign ARDUINO_IO[10] = SD;*/
//adjust to new connector
assign GPIO[31] = LRCLK; 
assign GPIO[9] = SCLK;
assign GPIO[35] = SD;

// vga controller   
// pixel X go up 2 pixels each clock not sure why
vga_controller vga_ins(
                            .iRST_n(KEY[0]),
                            .iVGA_CLK(clk),
                            .bgr_data_8(BGR),
                            .oHS(VGA_HS),
                            .oVS(VGA_VS),
                            .oVGA_B(VGA_B),
                            .oVGA_G(VGA_G),
                            .oVGA_R(VGA_R),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startOfFrame(startOfFrame));

// convertor                        
RGB_to_BGR cnvt_rgb (
                            .inRGB(RGB),
                            .oBGR(BGR));
                            
                            
// decide which object to print - need to be checked                            
objects_mux mux_inst(                               
                            .clk(clk),
                            .resetN(KEY[0]),
                            .alienMatrixDR(alienMatrixDR), 
                            .alienMatrixRGB(alienMatrixRGB), 
                            .playerDR(playerDR), 
                            .playerRGB(playerRGB), 
                            .playerShotDR(playerShotDR), 
                            .playerShotRGB(playerShotRGB), 
                            .alienShotDR(alienShotDR), 
                            .alienShotRGB(alienShotRGB), 
                            .scoreDR(scoreDR), 
                            .scoreRGB(scoreRGB),   
                            .scoreTitleDR(/*scoreTitleDR*/), // unused - moved to titles block
                            .scoreTitleRGB(/*scoreTitleRGB*/), // unused - moved to titles block
                            .highScoreDR(highScoreDR), 
                            .highScoreRGB(highScoreRGB),
                            .highScoreTitleDR(/*highScoreTitleDR*/), // unused - moved to titles block
                            .highScoreTitleRGB(/*highScoreTitleRGB*/), // unused - moved to titles block
                            .lifeDR(lifeDR), 
                            .lifeRGB(lifeRGB),   
                            .lifeTitleDR(titlesDR), 
                            .lifeTitleRGB(titlesRGB),   
                            .startScreenDR(startScreenDR), 
                            .startScreenRGB(startScreenRGB),   
                            .endScreenDR(endScreenDR), 
                            .endScreenRGB(endScreenRGB),  
                            .creditCoinsDR(creditCoinsDR), 
                            .creditCoinsRGB(creditCoinsRGB),   
                            .creditTitleDR(/*creditTitleDR*/),  // unused - moved to titles block
                            .creditTitleRGB(/*creditTitleRGB*/),  // unused - moved to titles block
                            .bounusShipDR(bounusShipDR), 
                            .bounusShipRGB(bounusShipRGB), 
                            .backGroundRGB(BG_RGB), 
                            .RGBOut(RGB)
);


// check collision - need to be checked
game_controller game_cnt_inst (
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame), 
                            .drawing_request_alienMatrix(alienMatrixDR),
                            .drawing_request_boarders(boardersDrawReq),
                            .drawing_request_playerShot(playerShotDR),
                            .drawing_request_alienShot(alienShotDR),
                            .drawing_request_player(playerDR),
                            .gameLose(gameLose),
                            .keyStartN(key_start),
                            .credits(credits),
                            .drawing_request_bonusShip(bounusShipDR),
                            .alienType(alienType),
                            .SingleHitPulse(/*SingleHitPulse*/), 
                            .collision_player_boarder(collisionPlayerBoarder),
                            .collision_alien_boarder(collisionAlienMatrixBoarder),
                            .collision_playerFire(fireCollision),
                            .collision_fire_boarder(),//empty port
                            .collision_fire_alien(alienplayer_FireCollision),
                            .collision_alienShot_boarder(/*collision_alienShot_boarder*/),
                            .collision_alienShot_player(collision_alienShot_player),
                            .collision_alienShot_all(alienFireCollision),
                            .restart(/*restart*/), 
                            .scoreUpdate(scoreUpdate), 
                            .standBy(standBy),
                            .startGame(startGame),
                            .gameEnded(gameEnded),
                            .collision_fire_bonusShip(collision_fire_bonusShip)

);

alien_matrix_block alien_block_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .collision(collisionAlienMatrixBoarder),
                            .fireCollision(fireCollision),
                            .standBy(standBy), // need to be fixed
                            .gameEnded(gameEnded), // need to be fixed
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .alienMiddleX(alienMiddleX),
                            .alienMiddleY(alienMiddleY),
                            .alienMatrixDR(alienMatrixDR),
                            .alienMatrixRGB(alienMatrixRGB),
                            .matrixDefeated(/*matrixDefeated*/),
                            .bottomAlien(bottomaAlien),
                            .alienType(alienType),
                            .alienMatrixTLY(alienMatrixYPosition)
);


player player_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            //.leftArrowPressed(~ARDUINO_IO[1]/*leftArrowPressed*/),
									 .leftArrowPressed(~GPIO[33]/*leftArrowPressed*/),// adjust to new connector

                            //.rightArrowPressed(~ARDUINO_IO[2]/*rightArrowPressed*/),
                            .rightArrowPressed(~GPIO[29]/*rightArrowPressed*/),// adjust to new connector
                            .enterKeyPressed(/*enterKeyPressed*/),
                            .collisionPlayerBoarder(collisionPlayerBoarder),
                            .standBy(standBy), // need to be fixed
                            .gameEnded(gameEnded), // need to be fixed
                            .playerHit(collision_alienShot_player
                            ), // collison alien shot player
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .playerDR(playerDR),
                            .playerRGB(playerRGB),
                            .playerXPosition(playerXPosition)
);

alien_shot_block alien_shot_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .alienFireCollision(alienFireCollision),
                            .bottomaAlien(bottomaAlien),
                            .standBy(standBy),
                            .gameEnded(gameEnded),              
                            .alienXPosition(alienMiddleX),
                            .alienYPosition(alienMiddleY),
                            .pixelX(pixelX),
                            .pixelY(pixelY),                    
                            .alienShotDR(alienShotDR),
                            .alienShotRGB(alienShotRGB)  
);

player_shots_block player_shot_inst(
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .fireCollision(fireCollision),
                            .playerXPosition(playerXPosition),
                            //.keyRisingEdge(~ARDUINO_IO[3]), //connected  to button 1
                            .keyRisingEdge(~GPIO[25]), //ADJUST TO NEW CONNECTORE 
                            .standBy(standBy),
                            .gameEnded(gameEnded),
                            .playerShotRGB(playerShotRGB),
                            .playerShotDR(playerShotDR),
                            .alive()
);

score_block score_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startOfFrame(startOfFrame),
                            .startGame(startGame),
                            .scoreUpdate(scoreUpdate),
                            .scoreDR(scoreDR),
                            .scoreRGB(scoreRGB),
                            .score(score)
);

player_life_block life_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .gameEnded(gameEnded),
                            .collisionAlienShot_Player(collision_alienShot_player),
                            .pixelX(pixelX),
                            .pixelY(pixelY),        
                            .playerLifeDR(lifeDR),
                            .playerLifeRGB(lifeRGB),
                            .gameLose(gameLose)
);


start_screen start_screen_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startScreenDR(startScreenDR),
                            .startScreenRGB(startScreenRGB)

);

end_screen end_screen_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .gameEnded(gameEnded),
                            .newHighScore(newHighScore),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .endScreenDR(endScreenDR),
                            .endScreenRGB(endScreenRGB)

);


credit_block credit_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .keyCoinN(key_coin_N),
                            .startGame(startGame),              
                            .creditCoinDR(creditCoinsDR),
                            .creditCoinRGB(creditCoinsRGB),
                            .credits(credits)
);


high_score high_score_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .startGame(startGame),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .score(score),  
                            .newHighScore(newHighScore),
                            .highScoreDR(highScoreDR),
                            .highScoreRGB(highScoreRGB)
);

titles_block titles_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .gameEnded(gameEnded),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),                
                            .titlesDR(titlesDR),
                            .titlesRGB(titlesRGB)
);


bonus_ship bonus_ship_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .gameEnded(gameEnded),                   
                            .bonusFireCollision(collision_fire_bonusShip),
                            .rise(alienplayer_FireCollision),                   
                            .alienMatrixYPosition(alienMatrixYPosition),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .bonus_ship_DR(bounusShipDR),
                            .bonus_ship_RGB(bounusShipRGB)
);


// background   - need to be fixed                      
back_ground_draw back_inst(
                            .clk(clk),
                            .resetN(KEY[0]),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .BG_RGB(BG_RGB),
                            .boardersDrawReq(boardersDrawReq)                       
);

 

// smiley object - not relveant
/*smiley_block  smiley_block_inst (
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .clk(clk),
                            .resetN(KEY[0]),
                            .startOfFrame(startOfFrame),
                            .Y_direction(),
                            .toggleX(),
                            .collision(collision),
                            .smileyDR(smileyDR),
                            .smileyRGB(smileyRGB));*/
                            
                            
endmodule