// ============================================================================
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| George Totolos    :| 08/22/2016:| Initial Revision
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
//`define ENABLE_HEX0
//`define ENABLE_HEX1
//`define ENABLE_HEX2
//`define ENABLE_HEX3
//`define ENABLE_HEX4
//`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
//`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

    //////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
    input                       ADC_CLK_10,
`endif
    //////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
    input                       MAX10_CLK1_50,
`endif
    //////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
    input                       MAX10_CLK2_50,
`endif

    //////////// SDRAM: 3.3-V LVTTL //////////
/*`ifdef ENABLE_SDRAM
    output          [12:0]      DRAM_ADDR,
    output           [1:0]      DRAM_BA,
    output                      DRAM_CAS_N,
    output                      DRAM_CKE,
    output                      DRAM_CLK,
    output                      DRAM_CS_N,
    inout           [15:0]      DRAM_DQ,
    output                      DRAM_LDQM,
    output                      DRAM_RAS_N,
    output                      DRAM_UDQM,
    output                      DRAM_WE_N,
`endif
*/
    //////////// SEG7: 3.3-V LVTTL //////////
/*`ifdef ENABLE_HEX0
    output           [7:0]      HEX0,
`endif
`ifdef ENABLE_HEX1
    output           [7:0]      HEX1,
`endif
`ifdef ENABLE_HEX2
    output           [7:0]      HEX2,
`endif
`ifdef ENABLE_HEX3
    output           [7:0]      HEX3,
`endif
`ifdef ENABLE_HEX4
    output           [7:0]      HEX4,
`endif
`ifdef ENABLE_HEX5
    output           [7:0]      HEX5,
`endif
*/
    //////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
    input            [1:0]      KEY,
`endif

    //////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
    //output           [9:0]      LEDR,
	 output           [5:0]      LEDR,

`endif

    //////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
    input            [9:0]      SW,
`endif

    //////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
    output           [3:0]      VGA_B,
    output           [3:0]      VGA_G,
    output                      VGA_HS,
    output           [3:0]      VGA_R,
    output                      VGA_VS,
`endif

    //////////// Accelerometer: 3.3-V LVTTL //////////
/*`ifdef ENABLE_ACCELEROMETER
    output                      GSENSOR_CS_N,
    input            [2:1]      GSENSOR_INT,
    output                      GSENSOR_SCLK,
    inout                       GSENSOR_SDI,
    inout                       GSENSOR_SDO,
`endif
*/
    //////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
    inout           [15:0]      ARDUINO_IO,// splited to two part button data 01/09
    //input             [7:0]       ARDUINO_IO, // button data - input
    //output            [15:8]      ARDUINO_IO, // i2s data - output 
    inout                       ARDUINO_RESET_N,
`endif

    //////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
    inout           [35:0]      GPIO
	 //input           [35:0]      GPIO

`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================



wire clk;
wire [7:0] RGB; // from mux to convertor
wire [7:0] BGR; // from convertor to vga

wire [10:0] pixelX;
wire [10:0] pixelY;
wire startOfFrame;


/* all the collision wires 
goes from the controller to the relevant modules*/
wire collision;
wire collisionAlienMatrixBoarder;
wire collisionPlayerBoarder;
wire alienFireCollision;
wire collision_playerFire;
wire fireCollision;
wire collision_alienShot_player;
wire collision_fire_bonusShip; // collision between bonus ship and player fire
wire alienplayer_FireCollision; // used to trigger bonus ship when alien was hit
wire collisionShield;
wire collisionShield_alien;
wire collision_player_hurt;

/* game stae wires 
goes from the controller to the modules*/
wire standBy;
wire gameEnded;
wire startGame; // indicate passing from menu to the game

//metrix state wires 
wire bottomaAlien; // when pixels locate on bottom alien in matrix
wire [10:0] alienMiddleX; // matrix middle point
wire [10:0] alienMiddleY;
wire [10:0] alienMatrixYPosition;  // top y matrix position used for bonus ship 
wire [1:0] alienType;

// player state wires
wire [10:0] playerXPosition; // for player shot initial
wire newFire;

// score and high score data and state wires
wire [7:0] scoreUpdate;
wire [31:0] score;
wire newHighScore; // if player achive new high score during the game

// live wire - high if no life left
wire gameLose; 

// credits state bus
wire [3:0] credits; // how much money left

wire bonus_ship_alive; // high if bonus ship on screen

/* this part contain all the wires from the diffrent modules that display sometihnig on the screen.
each tuple has ...DR and ...rgb  that goes from their module to the display mux*/

wire boardersDrawReq;
wire [7:0] BG_RGB;

wire alienMatrixDR;
wire [7:0] alienMatrixRGB;

wire playerDR;
wire [7:0] playerRGB;

wire alienShotDR;
wire [7:0] alienShotRGB;

wire playerShotDR;
wire [7:0] playerShotRGB;

wire scoreDR;
wire [7:0] scoreRGB;

wire lifeDR;
wire [7:0] lifeRGB;

wire startScreenDR;
wire [7:0] startScreenRGB;

wire endScreenDR;
wire [7:0] endScreenRGB;

wire creditCoinsDR;
wire [7:0]creditCoinsRGB;

wire highScoreDR;
wire [7:0]highScoreRGB; 

wire titlesDR;
wire [7:0]titlesRGB;                            

wire bounusShipDR;
wire [7:0]bounusShipRGB;

wire shieldDR;
wire [7:0] shieldRGB;
//assign shieldDR = 1'b0;
//assign shieldRGB = 8'b0;

wire audioDR;
wire [7:0]audioRGB;

wire sound_en;

//input from de10 board
wire resetN;
assign resetN = KEY[0];

// INPUT WIRES FROM PICADE TO MAX10
wire key_start; // START BUTTON
assign key_start = GPIO[15]; 
assign LEDR[0] = key_start;

wire key_coin_N; // COIN BUTTON
assign key_coin_N = GPIO[11]; 
assign LEDR[3] = key_coin_N;

// left joystick indicator activate low 
wire left;
assign left = GPIO[33];
assign LEDR[2] = ~GPIO[33];

// right joystick indicator activate low
wire right;
assign right = GPIO[29];
assign LEDR[1] = ~GPIO[29];

// right side button idicator activate low
wire vol_btn;
assign vol_btn = GPIO[13];

// button one indicator required for fire
wire btn_1;
assign btn_1 = GPIO[25];


// gameended debug
assign LEDR[4] = gameEnded;
assign LEDR[5] = gameLose;


// wires for audio 
wire LRCLK;
wire SCLK;
wire SD;





//=======================================================
//  Structural coding
//=======================================================

// clock 
vga_pll u1(
    .areset(),
    .inclk0(MAX10_CLK1_50),
    .c0(clk),
    .locked());



    
// audio module
audio audio_inst( 
    .onOff(sound_en),
     .MCLK(clk),
    .resetN(resetN), //adjust to new connector
	 .new_fire(newFire),
	 .collision_alienShot_player(collision_alienShot_player),
	 .collision_fire_alien(alienplayer_FireCollision||collision_fire_bonusShip),
	 .bonusFireCollision(collision_fire_bonusShip),
	 .bonus_ship_alive(bonus_ship_alive),
	 .alienMiddleY(alienMiddleY),
	 .LRCLK(LRCLK),
    .SCLK(SCLK),
    .SD(SD)
);


/*assign ARDUINO_IO[8] = LRCLK; 
assign ARDUINO_IO[9] = SCLK;
assign ARDUINO_IO[10] = SD;*/
//adjust to new connector
assign GPIO[31] = LRCLK; 
assign GPIO[9] = SCLK;
assign GPIO[35] = SD;

// vga controller   
// pixel X go up 2 pixels each clock not sure why
vga_controller vga_ins(
                            .iRST_n(resetN),
                            .iVGA_CLK(clk),
                            .bgr_data_8(BGR),
                            .oHS(VGA_HS),
                            .oVS(VGA_VS),
                            .oVGA_B(VGA_B),
                            .oVGA_G(VGA_G),
                            .oVGA_R(VGA_R),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startOfFrame(startOfFrame));

// convertor                        
RGB_to_BGR cnvt_rgb (
                            .inRGB(RGB),
                            .oBGR(BGR));
                            
                            
// decide which object to print - need to be checked                            
objects_mux mux_inst(                               
                            .clk(clk),
                            .resetN(resetN),
                            .alienMatrixDR(alienMatrixDR), 
                            .alienMatrixRGB(alienMatrixRGB), 
                            .playerDR(playerDR), 
                            .playerRGB(playerRGB), 
                            .playerShotDR(playerShotDR), 
                            .playerShotRGB(playerShotRGB), 
                            .alienShotDR(alienShotDR), 
                            .alienShotRGB(alienShotRGB), 
                            .scoreDR(scoreDR), 
                            .scoreRGB(scoreRGB),   
                            .scoreTitleDR(/*scoreTitleDR*/), // unused - moved to titles block
                            .scoreTitleRGB(/*scoreTitleRGB*/), // unused - moved to titles block
                            .highScoreDR(highScoreDR), 
                            .highScoreRGB(highScoreRGB),
                            .highScoreTitleDR(/*highScoreTitleDR*/), // unused - moved to titles block
                            .highScoreTitleRGB(/*highScoreTitleRGB*/), // unused - moved to titles block
                            .lifeDR(lifeDR), 
                            .lifeRGB(lifeRGB),   
                            .lifeTitleDR(titlesDR), 
                            .lifeTitleRGB(titlesRGB),   
                            .startScreenDR(startScreenDR), 
                            .startScreenRGB(startScreenRGB),   
                            .endScreenDR(endScreenDR), 
                            .endScreenRGB(endScreenRGB),  
                            .creditCoinsDR(creditCoinsDR), 
                            .creditCoinsRGB(creditCoinsRGB),   
                            .creditTitleDR(/*creditTitleDR*/),  // unused - moved to titles block
                            .creditTitleRGB(/*creditTitleRGB*/),  // unused - moved to titles block
                            .bounusShipDR(bounusShipDR),   
									 .bounusShipRGB(bounusShipRGB), 	
									 .shieldDR(shieldDR),
									 .shieldRGB(shieldRGB),
									 .audioDR(audioDR),
									 .audioRGB(audioRGB),
									 .backGroundRGB(BG_RGB), 
                            .RGBOut(RGB)
);


// check collision - need to be checked
game_controller game_cnt_inst (
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame), 
                            .drawing_request_alienMatrix(alienMatrixDR),
                            .drawing_request_boarders(boardersDrawReq),
                            .drawing_request_playerShot(playerShotDR),
                            .drawing_request_alienShot(alienShotDR),
                            .drawing_request_player(playerDR),
                            .gameLose(gameLose),
                            .keyStartN(key_start),
                            .credits(credits),
                            .drawing_request_bonusShip(bounusShipDR),
									 .drawing_request_shieldDR(shieldDR),
                            .alienType(alienType),
                            .SingleHitPulse(/*SingleHitPulse*/), 
                            .collision_player_boarder(collisionPlayerBoarder),
                            .collision_alien_boarder(collisionAlienMatrixBoarder),
                            .collision_playerFire(fireCollision),
                            .collision_fire_boarder(),//empty port
                            .collision_fire_alien(alienplayer_FireCollision),
                            .collision_alienShot_boarder(/*collision_alienShot_boarder*/),
                            .collision_alienShot_player(collision_alienShot_player),
                            .collision_alienShot_all(alienFireCollision),
									 .collisionShield(collisionShield),
									 .collisionShield_alien(collisionShield_alien),
									 .collision_player_hurt(collision_player_hurt),
                            .restart(/*restart*/), 
                            .scoreUpdate(scoreUpdate), 
                            .standBy(standBy),
                            .startGame(startGame),
                            .gameEnded(gameEnded),
                            .collision_fire_bonusShip(collision_fire_bonusShip)

);

alien_matrix_block alien_block_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .collision(collisionAlienMatrixBoarder),
                            .fireCollision(fireCollision),
                            .standBy(standBy), // need to be fixed
                            .gameEnded(gameEnded), // need to be fixed
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .alienMiddleX(alienMiddleX),
                            .alienMiddleY(alienMiddleY),
                            .alienMatrixDR(alienMatrixDR),
                            .alienMatrixRGB(alienMatrixRGB),
                            .matrixDefeated(/*matrixDefeated*/),
                            .bottomAlien(bottomaAlien),
                            .alienType(alienType),
                            .alienMatrixTLY(alienMatrixYPosition)
);


player player_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
									 .leftArrowPressed(~left/*leftArrowPressed*/),// adjust to new connector
                            .rightArrowPressed(~right/*rightArrowPressed*/),// adjust to new connector
                            .enterKeyPressed(/*enterKeyPressed*/),
                            .collisionPlayerBoarder(collisionPlayerBoarder),
                            .standBy(standBy), // need to be fixed
                            .gameEnded(gameEnded), // need to be fixed
                            .playerHit(collision_alienShot_player), // collison alien shot player
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .playerDR(playerDR),
                            .playerRGB(playerRGB),
                            .playerXPosition(playerXPosition)
);

alien_shot_block alien_shot_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .alienFireCollision(alienFireCollision),
                            .bottomaAlien(bottomaAlien),
                            .standBy(standBy),
                            .gameEnded(gameEnded),              
                            .alienXPosition(alienMiddleX),
                            .alienYPosition(alienMiddleY),
                            .pixelX(pixelX),
                            .pixelY(pixelY),                    
                            .alienShotDR(alienShotDR),
                            .alienShotRGB(alienShotRGB)  
);

player_shots_block player_shot_inst(
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .fireCollision(fireCollision),
                            .playerXPosition(playerXPosition),
                            .keyRisingEdge(~btn_1), //ADJUST TO NEW CONNECTORE 
                            .standBy(standBy),
                            .gameEnded(gameEnded),
                            .playerShotRGB(playerShotRGB),
                            .playerShotDR(playerShotDR),
                            .alive(),
									 .newFire(newFire)

);

score_block score_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startOfFrame(startOfFrame),
                            .startGame(startGame),
                            .scoreUpdate(scoreUpdate),
                            .scoreDR(scoreDR),
                            .scoreRGB(scoreRGB),
                            .score(score)
);

player_life_block life_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .gameEnded(gameEnded),
									 .collisionAlienShot_Player(collision_player_hurt),
									 //.collisionAlienShot_Player(collision_alienShot_player), // 13/12 - player doesnt died in collison with matrix
                            .pixelX(pixelX),
                            .pixelY(pixelY),        
                            .playerLifeDR(lifeDR),
                            .playerLifeRGB(lifeRGB),
                            .gameLose(gameLose)
);


start_screen start_screen_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .startScreenDR(startScreenDR),
                            .startScreenRGB(startScreenRGB)

);

end_screen end_screen_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .gameEnded(gameEnded),
                            .newHighScore(newHighScore),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .endScreenDR(endScreenDR),
                            .endScreenRGB(endScreenRGB)

);


credit_block credit_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .keyCoinN(key_coin_N),
                            .startGame(startGame),              
                            .creditCoinDR(creditCoinsDR),
                            .creditCoinRGB(creditCoinsRGB),
                            .credits(credits)
);


high_score high_score_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .startGame(startGame),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .score(score),  
                            .newHighScore(newHighScore),
                            .highScoreDR(highScoreDR),
                            .highScoreRGB(highScoreRGB)
);

titles_block titles_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .gameEnded(gameEnded),
                            .standBy(standBy),
                            .pixelX(pixelX),
                            .pixelY(pixelY),                
                            .titlesDR(titlesDR),
                            .titlesRGB(titlesRGB)
);


bonus_ship bonus_ship_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .startOfFrame(startOfFrame),
                            .standBy(standBy),
                            .gameEnded(gameEnded),                   
                            .bonusFireCollision(collision_fire_bonusShip),
                            .rise(alienplayer_FireCollision),                   
                            .alienMatrixYPosition(alienMatrixYPosition),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
									 .bonus_ship_alive(bonus_ship_alive),
                            .bonus_ship_DR(bounusShipDR),
                            .bonus_ship_RGB(bounusShipRGB)
);


shield_block shield_block_inst(
					.clk(clk),
					.resetN(resetN),
					.startOfFrame(startOfFrame),
					.standBy(standBy),
					.gameEnded(gameEnded),
					.collisionShield(collisionShield),  
					.pixelX(pixelX),
					.pixelY(pixelY),
					.shieldDR(shieldDR),
					.shieldRGB(shieldRGB),
			      .collisionShield_alien(collisionShield_alien)


);


/////////when removing shield block add these logics:
//assign shieldDR = 1'b0;
//assign shieldRGB = 8'b0;







volume_display vol_dis_inst(
									.clk(clk),
									.resetN(resetN),
									.vol_btn(~vol_btn),
									.pixelX(pixelX),
									.pixelY(pixelY),
									.sound_en(sound_en),
									.audioDR(audioDR),
									.audioRGB(audioRGB)

);

// background   - need to be fixed                      
back_ground_draw back_inst(
                            .clk(clk),
                            .resetN(resetN),
                            .pixelX(pixelX),
                            .pixelY(pixelY),
                            .BG_RGB(BG_RGB),
                            .boardersDrawReq(boardersDrawReq)                       
);

 


                            
                            
endmodule